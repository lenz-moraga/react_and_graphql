// Setting pothos as our schema builder, to implement a Code-First(there are two approaches: Code-First and SDL-First) approach to auto generate our schemas
import SchemaBuilder from "@pothos/core";
import { DateResolver } from "graphql-scalars";

import PrismaPlugin from "@pothos/plugin-prisma";
import type PrismaTypes from "@pothos/plugin-prisma/generated";
// To define the objects and fields our API will expose via queries, we will be using pothos/plugin-prisma

import { prisma } from "./db";

// By default, GraphQL only supports a limited set of scalar data types:
// • Int
// • Float
// • String
// • Boolean
// • ID
// If we remember there are a few fields defined that use the DateTime data type, in our Prisma
// SchemaBuilder. To handle those within our GraphQL appendFile, we will need to define a
// custom Date scalar type. graphql-scalars already have some pre-made custom scalar type
// definitions available

export const builder = new SchemaBuilder<{
  Scalars: {
    Date: { Input: Date; Output: Date };
  };
  // the following settings is to apply the generated Pothos type to the builder
  PrismaTypes: PrismaTypes;
  // As soon as we add the generated types, Pothos will let us know(typescript error) that we need to provide a prisma instance to the builder and once we do that, we will receive another error expecting an instance of prisma client to be provided, so we created it in the db.ts file and imported it here
}>({
  plugins: [PrismaPlugin],
  prisma: {
    client: prisma,
  },
});
// Once the pothos Prisma plugin is completely set and ready-to-go. We can take the types generated by Prisma and allows us easy access to those within our GraphQl object types and queries. Now we have a single source of truth handling the types in our database, the API used to query the DB and the GraphQL schema.

builder.addScalarType("Date", DateResolver, {});

builder.queryType({});
